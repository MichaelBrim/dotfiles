;; This file contains customization information for the text editor 
;; emacs. The language that is used is called elisp, which is a emacs
;; version of lisp. 


;; ###########################################################################
;; The following two lines fix a problem that some people have. The original
;; emacs mapped C-h to be the help screen. Unfortunately, this is the same 
;; as backspace. So, attempting to press backspace would bring up a help
;; screen. The new key-binding for help is C-x h.

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(global-set-key "\^xh" 'help-for-help)
(global-set-key "\^h"  'backward-delete-char-untabify)

;; 
;; require-final-newline ensures that every line of a text file ends with a
;; "newline" characted. Many unix utilities need a final newline in order to
;; read the last line of the file. You probably don't want to change this.
(setq require-final-newline t)

;; If you would like smooth scrolling, uncomment this line
;(setq scroll-step 1)

;; For a much better buffer list:
;(global-set-key "\C-x\C-b" 'electric-buffer-list)

;; ###########################################################################
;; The following is an example of how to customize the c-mode. There are
;; also different modes for asm, c++, lisp, perl, tcl, tex, etc...

;; you can have GNU, K&R, BSD, C++, Whitesmith
;(setq default-c-style 'K&R)

;; another useful option
;(setq c-auto-newline t)

;;; Re-enable from "novice"

(put 'eval-expression 'disabled nil)
(put 'downcase-region 'disabled t)      ;; It's very annoying to do this
(put 'upcase-region 'disabled t)        ;; by accident!

;; ###### turn off tool-bar, use 4-space indents for code ######
(custom-set-variables
 '(tool-bar-mode nil nil (tool-bar))
 '(c-basic-offset 4)
 '(indent-tabs-mode nil))

;; ###### I don't use *scratch* or *Messages* buffers

;; Makes *scratch* empty.
(setq initial-scratch-message "")

;; Removes *scratch* from buffer after the mode has been set.
;; (defun remove-scratch-buffer ()
;;  (if (get-buffer "*scratch*")
;;      (kill-buffer "*scratch*")))
;;(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

;; Removes *Messages* from the buffer.
(setq-default message-log-max nil)
(kill-buffer "*Messages*")

;; Removes *Completions* from buffer after you've opened a file.
(add-hook 'minibuffer-exit-hook
      '(lambda ()
         (let ((buffer "*Completions*"))
           (and (get-buffer buffer)
                (kill-buffer buffer)))))

;; Don't show *Buffer list* when opening multiple files at the same time.
(setq inhibit-startup-buffer-menu t)

;; Show only one active window when opening multiple files at the same time.
(add-hook 'window-setup-hook 'delete-other-windows)

